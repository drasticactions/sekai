<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.AspNet.FileSystems.Interfaces</name>
    </assembly>
    <members>
        <member name="T:Microsoft.AspNet.FileSystems.IDirectoryContents">
            <summary>
            Represents a directory's content in the file system.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.FileSystems.IDirectoryContents.Exists">
            <summary>
            True if a directory was located at the given path.
            </summary>
        </member>
        <member name="T:Microsoft.AspNet.FileSystems.IFileInfo">
            <summary>
            Represents a file in the given file system.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.FileSystems.IFileInfo.Exists">
            <summary>
            True if resource exists in the underlying storage system.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.FileSystems.IFileInfo.Length">
            <summary>
            The length of the file in bytes, or -1 for a directory or non-existing files.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.FileSystems.IFileInfo.PhysicalPath">
            <summary>
            The path to the file, including the file name. Return null if the file is not directly accessible.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.FileSystems.IFileInfo.Name">
            <summary>
            The name of the file or directory, not including any path.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.FileSystems.IFileInfo.LastModified">
            <summary>
            When the file was last modified
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.FileSystems.IFileInfo.IsDirectory">
            <summary>
            True for the case TryGetDirectoryContents has enumerated a sub-directory
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.FileSystems.IFileInfo.CreateReadStream">
            <summary>
            Return file contents as readonly stream. Caller should dispose stream when complete.
            </summary>
            <returns>The file stream</returns>
        </member>
        <member name="P:Microsoft.AspNet.FileSystems.IFileInfo.IsReadOnly">
            <summary>
            True if the file is readonly.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.FileSystems.IFileInfo.WriteContent(System.Byte[])">
            <summary>
            Store new contents for resource. Folders will be created if needed. 
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.FileSystems.IFileInfo.Delete">
            <summary>
            Deletes the file.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.FileSystems.IFileInfo.CreateFileChangeTrigger">
            <summary>
            Gets a trigger to monitor the file changes. 
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AspNet.FileSystems.IFileSystem">
            <summary>
            A file system abstraction.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.FileSystems.IFileSystem.GetFileInfo(System.String)">
            <summary>
            Locate a file at the given path.
            </summary>
            <param name="subpath">Relative path that identifies the file.</param>
            <returns>The file information. Caller must check Exists property.</returns>
        </member>
        <member name="M:Microsoft.AspNet.FileSystems.IFileSystem.GetDirectoryContents(System.String)">
            <summary>
            Enumerate a directory at the given path, if any.
            </summary>
            <param name="subpath">Relative path that identifies the directory.</param>
            <returns>Returns the contents of the directory.</returns>
        </member>
        <member name="P:Microsoft.Framework.Expiration.Interfaces.IExpirationTrigger.IsExpired">
            <summary>
            Checked each time the key is accessed in the cache.
            </summary>
        </member>
        <member name="P:Microsoft.Framework.Expiration.Interfaces.IExpirationTrigger.ActiveExpirationCallbacks">
            <summary>
            Indicates if this trigger will pro-actively trigger callbacks. Callbacks are still guaranteed to fire, eventually.
            </summary>
        </member>
        <member name="M:Microsoft.Framework.Expiration.Interfaces.IExpirationTrigger.RegisterExpirationCallback(System.Action{System.Object},System.Object)">
            <summary>
            Registers for a callback that will be invoked when the entries should be expired.
            IsExpired MUST be set before the callback is invoked.
            </summary>
            <param name="callback"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
    </members>
</doc>
